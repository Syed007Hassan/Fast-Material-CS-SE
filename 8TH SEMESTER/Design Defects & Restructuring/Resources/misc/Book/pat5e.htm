<HTML><HEAD>	<TITLE>Mediator</TITLE>
<SCRIPT>
function setFocus() {	
	if ((navigator.appName != "Netscape") && (parseFloat(navigator.appVersion) == 2)) {
	return;
	} else {
	self.focus();
	}
}
</SCRIPT>
</HEAD>

<BODY   BGCOLOR         = #FFFFFF
onLoad="setFocus()";>

<A NAME="top"></A>
<A NAME="Mediator"></A>
<A NAME="intent"></A>
<H2><A HREF="#motivation"><IMG SRC="gifsb/down3.gif" BORDER=0 ALT="next: 
Motivation"></A> Intent</H2> 

<A NAME="auto1000"></A>
<P>Define an object that encapsulates how a set of objects interact.
Mediator promotes loose coupling by keeping objects from referring to
each other explicitly, and it lets you vary their interaction
independently.</P>

<A NAME="motivation"></A>
<H2><A HREF="#applicability"><IMG SRC="gifsb/down3.gif" BORDER=0 
ALT="next: Applicability"></A> Motivation</H2> 

<A NAME="auto1001"></A>
<P>Object-oriented design encourages the distribution of behavior
among objects.  Such distribution can result in an object structure
with many connections between objects; in the worst case, every object
ends up knowing about every other.</P>

<A NAME="auto1002"></A>
<P>Though partitioning a system into many objects generally enhances
reusability, proliferating interconnections tend to reduce it again.
Lots of interconnections make it less likely that an object can work
without the support of others&#151;the system acts as though it were
monolithic. Moreover, it can be difficult to change the system's
behavior in any significant way, since behavior is distributed among
many objects. As a result, you may be forced to define many subclasses
to customize the system's behavior.</P>

<A NAME="auto1003"></A>
<P>As an example, consider the implementation of dialog boxes in a
graphical user interface. A dialog box uses a window to present a
collection of widgets such as buttons, menus, and entry fields, as
shown here:</P>

<P ALIGN=CENTER><IMG SRC="Pictures/fontc047.gif"></P>

<A NAME="listbox"></A>
<P>Often there are dependencies between the widgets in the dialog. For
example, a button gets disabled when a certain entry field is empty.
Selecting an entry in a list of choices called a <STRONG>list box</STRONG>
might change the contents of an entry field. Conversely, typing text
into the entry field might automatically select one or more
corresponding entries in the list box. Once text appears in the entry
field, other buttons may become enabled that let the user do something
with the text, such as changing or deleting the thing to which it refers.</P>

<A NAME="auto1004"></A>
<P>Different dialog boxes will have different dependencies between
widgets.  So even though dialogs display the same kinds of widgets,
they can't simply reuse stock widget classes; they have to be
customized to reflect dialog-specific dependencies. Customizing them
individually by subclassing will be tedious, since many classes are
involved.</P>

<A NAME="def-media"></A>
<P>You can avoid these problems by encapsulating collective behavior in a
separate <STRONG>mediator</STRONG> object.  A mediator is responsible for
controlling and coordinating the interactions of a group of objects.
The mediator serves as an intermediary that keeps objects in the group
from referring to each other explicitly.  The objects only know the
mediator, thereby reducing the number of interconnections.</P>

<A NAME="fontdlogdirector"></A>
<P>For example, <STRONG>FontDialogDirector</STRONG> can be the mediator
between the widgets in a dialog box. A FontDialogDirector object knows
the widgets in a dialog and coordinates their interaction. It acts as
a hub of communication for widgets:</P>

<A NAME="mediator-eg-obj"></A>
<P ALIGN=CENTER><IMG SRC="Pictures/media033.gif"></P>

<A NAME="auto1005"></A>
<P>The following interaction diagram illustrates how the objects cooperate to
handle a change in a list box's selection:</P>

<A NAME="mediator-id"></A>
<P ALIGN=CENTER><IMG SRC="Pictures/media031.gif"></P>

<A NAME="auto1006"></A>
<P>Here's the succession of events by which a list box's selection passes
to an entry field:</P>

<OL>

<A NAME="auto1007"></A>
<LI>The list box tells its director that it's changed.</LI>
<A NAME="auto1008"></A>
<P></P>
<A NAME="auto1009"></A>
<LI>The director gets the selection from the list box.</LI>
<A NAME="auto1010"></A>
<P></P>
<A NAME="auto1011"></A>
<LI>The director passes the selection to the entry field.</LI>
<A NAME="auto1012"></A>
<P></P>
<A NAME="auto1013"></A>
<LI>Now that the entry field contains some text, the director
enables button(s) for initiating an action (e.g., "demibold," "oblique").</LI>

</OL>

<A NAME="auto1014"></A>
<P>Note how the director mediates between the list box and the entry field.
Widgets communicate with each other only indirectly, through the
director. They don't have to know about each other; all they know is the
director. Furthermore, because the behavior is localized in one class,
it can be changed or replaced by extending or replacing that class.</P>

<A NAME="auto1015"></A>
<P>Here's how the FontDialogDirector abstraction can be integrated into a
class library:</P>

<A NAME="275c"></A>
<P ALIGN=CENTER><IMG SRC="Pictures/media034.gif"></P>

<A NAME="auto1016"></A>
<P>DialogDirector is an abstract class that defines the overall behavior of
a dialog. Clients call the ShowDialog operation to display the dialog on
the screen. CreateWidgets is an abstract operation for creating the
widgets of a dialog. WidgetChanged is another abstract operation;
widgets call it to inform their director that they have changed.
DialogDirector subclasses override CreateWidgets to create the proper
widgets, and they override WidgetChanged to handle the changes.</P>

<A NAME="applicability"></A>
<H2><A HREF="#structure"><IMG SRC="gifsb/down3.gif" BORDER=0 ALT="next: 
Structure"></A> Applicability</H2> 

<A NAME="auto1017"></A>
<P>Use the Mediator pattern when</P>

<UL>

<A NAME="auto1018"></A>
<LI>a set of objects communicate in well-defined but complex ways.  The
resulting interdependencies are unstructured and difficult to
understand.</LI>
<A NAME="auto1019"></A>
<P></P>
<A NAME="auto1020"></A>
<LI>reusing an object is difficult because it refers to and communicates
with many other objects.</LI>
<A NAME="auto1021"></A>
<P></P>
<A NAME="auto1022"></A>
<LI>a behavior that's distributed between several classes should be
customizable without a lot of subclassing.</LI>

</UL>

<A NAME="structure"></A>
<H2><A HREF="#participants"><IMG SRC="gifsb/down3.gif" BORDER=0 ALT="next: 
Participants"></A> Structure</H2> 

<P ALIGN=CENTER><IMG SRC="Pictures/mediator.gif"></P>

<A NAME="auto1023"></A>
<P>A typical object structure might look like this:</P>

<P ALIGN=CENTER><IMG SRC="Pictures/media030.gif"></P>

<A NAME="participants"></A>
<H2><A HREF="#collaborations"><IMG SRC="gifsb/down3.gif" BORDER=0 
ALT="next: Collaborations"></A> Participants</H2>

<UL>

<A NAME="auto1024"></A>
<LI><B>Mediator</B> (DialogDirector)</LI>

<A NAME="auto1025"></A>
<P></P>

    <UL>

    <A NAME="auto1026"></A>
<LI>defines an interface for communicating with Colleague objects.</LI>

    </UL>

<A NAME="auto1027"></A>
<P></P>

<A NAME="auto1028"></A>
<LI><B>ConcreteMediator</B> (FontDialogDirector)

<A NAME="auto1029"></A>
<P></P>

    <UL>

    <A NAME="auto1030"></A>
<LI>implements cooperative behavior by coordinating Colleague objects.</LI>

    <A NAME="auto1031"></A>
<P><!-- extra space --></P>

    <A NAME="auto1032"></A>
<LI>knows and maintains its colleagues.</LI>

    </UL>

<A NAME="auto1033"></A>
<P></P>

<A NAME="auto1034"></A>
<LI><B>Colleague classes</B> (ListBox, EntryField)

<A NAME="auto1035"></A>
<P></P>

    <UL>

    <A NAME="auto1036"></A>
<LI>each Colleague class knows its Mediator object.</LI>

    <A NAME="auto1037"></A>
<P><!-- extra space --></P>

    <A NAME="auto1038"></A>
<LI>each colleague communicates with its mediator whenever it would have
    otherwise communicated with another colleague.</LI>

    </UL>

</UL>

<A NAME="collaborations"></A>
<H2><A HREF="#consequences"><IMG SRC="gifsb/down3.gif" BORDER=0 
ALT="next: Consequences"></A> Collaborations</H2>

<UL>

<A NAME="auto1039"></A>
<LI>Colleagues send and receive requests from a Mediator object. The
mediator implements the cooperative behavior by routing requests
between the appropriate colleague(s).</LI>

</UL>

<A NAME="consequences"></A>
<H2><A HREF="#implementation"><IMG SRC="gifsb/down3.gif" BORDER=0 
ALT="next: Implementation"></A> Consequences</H2> 

<A NAME="auto1040"></A>
<P>The Mediator pattern has the following benefits and drawbacks:</P>

<OL>

<A NAME="auto1041"></A>
<LI><EM>It limits subclassing.</EM>
A mediator localizes behavior that otherwise would be distributed among
several objects. Changing this behavior requires subclassing Mediator
only; Colleague classes can be reused as is.</LI>
<A NAME="auto1042"></A>
<P></P>
<A NAME="auto1043"></A>
<LI><EM>It decouples colleagues.</EM>
A mediator promotes loose coupling between colleagues.  You can vary
and reuse Colleague and Mediator classes independently.</LI>
<A NAME="auto1044"></A>
<P></P>
<A NAME="auto1045"></A>
<LI><EM>It simplifies object protocols.</EM>
A mediator replaces many-to-many interactions with one-to-many
interactions between the mediator and its colleagues.  One-to-many
relationships are easier to understand, maintain, and extend.</LI>
<A NAME="auto1046"></A>
<P></P>
<A NAME="auto1047"></A>
<LI><EM>It abstracts how objects cooperate.</EM>
Making mediation an independent concept and encapsulating it in an
object lets you focus on how objects interact apart from their
individual behavior. That can help clarify how objects interact in a
system.</LI>
<A NAME="auto1048"></A>
<P></P>
<A NAME="auto1049"></A>
<LI><EM>It centralizes control.</EM>
The Mediator pattern trades complexity of interaction for complexity in
the mediator. Because a mediator encapsulates protocols, it can become
more complex than any individual colleague. This can make the mediator
itself a monolith that's hard to maintain.</LI>

</OL>

<A NAME="implementation"></A>
<H2><A HREF="#samplecode"><IMG SRC="gifsb/down3.gif" BORDER=0 ALT="next: 
Sample Code"></A> Implementation</H2> 

<A NAME="auto1050"></A>
<P>The following implementation issues are relevant to the Mediator
pattern:</P>

<OL>

<A NAME="media-omit-abs"></A>
<LI><EM>Omitting the abstract Mediator class.</EM>
There's no need to define an abstract Mediator class when colleagues
work with only one mediator.  The abstract coupling that the
Mediator class provides lets colleagues work with different Mediator
subclasses, and vice versa.</LI>

<A NAME="auto1051"></A>
<P></P>

<A NAME="media-comm-coll"></A>
<LI><EM>Colleague-Mediator communication.</EM>
Colleagues have to communicate with their mediator when an event of
interest occurs.  One approach is to implement the Mediator as an
Observer using the <A HREF="pat5gfs.htm" TARGET="_mainDisplayFrame">Observer (293)</A> pattern.  Colleague
classes act as Subjects, sending notifications to the mediator
whenever they change state.  The mediator responds by propagating the
effects of the change to other colleagues.

<A NAME="deleg-278"></A>
<A NAME="smalltkv-use-media"></A>
<P>Another approach defines a specialized notification interface in
Mediator that lets colleagues be more direct in their communication.
Smalltalk/V for Windows uses a form of delegation: When communicating
with the mediator, a colleague passes itself as an argument, allowing
the mediator to identify the sender.  The Sample Code uses this
approach, and the Smalltalk/V implementation is discussed further in
the Known Uses.</P>

</LI>

</OL>

<A NAME="samplecode"></A>
<H2><A HREF="#knownuses"><IMG SRC="gifsb/down3.gif" BORDER=0 ALT="next: 
Known Uses"></A> Sample Code</H2> 

<A NAME="auto1052"></A>
<P>We'll use a DialogDirector to implement the font dialog box shown in
the Motivation.  The abstract class <CODE>DialogDirector</CODE> defines
the interface for directors.</P>

<A NAME="auto1053"></A>
<PRE>
    class DialogDirector {
    public:
        virtual ~DialogDirector();
    
        virtual void ShowDialog();
        virtual void WidgetChanged(Widget*) = 0;
    
    protected:
        DialogDirector();
        virtual void CreateWidgets() = 0;
    };
</PRE>

<A NAME="widget-class"></A>
<P><CODE>Widget</CODE> is the abstract base class for widgets.  A
widget knows its director.</P>

<A NAME="auto1054"></A>
<PRE>
    class Widget {
    public:
        Widget(DialogDirector*);
        virtual void Changed();
    
        virtual void HandleMouse(MouseEvent&amp; event);
        // ...
    private:
        DialogDirector* _director;
    };
</PRE>

<A NAME="auto1055"></A>
<P><CODE>Changed</CODE> calls the director's <CODE>WidgetChanged</CODE>
operation. Widgets call <CODE>WidgetChanged</CODE> on their director to
inform it of a significant event.</P>

<A NAME="auto1056"></A>
<PRE>
    void Widget::Changed () {
        _director->WidgetChanged(this);
    }
</PRE>

<A NAME="auto1057"></A>
<P>Subclasses of <CODE>DialogDirector</CODE> override
<CODE>WidgetChanged</CODE> to affect the appropriate widgets.  The widget
passes a reference to itself as an argument to <CODE>WidgetChanged</CODE>
to let the director identify the widget that changed.
<CODE>DialogDirector</CODE> subclasses redefine the
<CODE>CreateWidgets</CODE> pure virtual to construct the widgets in the
dialog.</P>

<A NAME="listbox2"></A>
<P>The <CODE>ListBox</CODE>, <CODE>EntryField</CODE>, and <CODE>Button</CODE> are
subclasses of <CODE>Widget</CODE> for specialized user interface
elements. <CODE>ListBox</CODE> provides a <CODE>GetSelection</CODE>
operation to get the current selection, and <CODE>EntryField</CODE>'s
<CODE>SetText</CODE> operation puts new text into the field.</P>

<A NAME="auto1058"></A>
<PRE>
    class ListBox : public Widget {
    public:
        ListBox(DialogDirector*);
    
        virtual const char* GetSelection();
        virtual void SetList(List&lt;char*>* listItems);
        virtual void HandleMouse(MouseEvent&amp; event);
        // ...
    };
    
    class EntryField : public Widget {
    public:
        EntryField(DialogDirector*);
    
        virtual void SetText(const char* text);
        virtual const char* GetText();
        virtual void HandleMouse(MouseEvent&amp; event);
        // ...
    };
</PRE>

<A NAME="auto1059"></A>
<P><CODE>Button</CODE> is a simple widget that calls <CODE>Changed</CODE>
whenever it's pressed. This gets done in its implementation of
<CODE>HandleMouse</CODE>:</P>

<A NAME="auto1060"></A>
<PRE>
    class Button : public Widget {
    public:
        Button(DialogDirector*);
    
        virtual void SetText(const char* text);
        virtual void HandleMouse(MouseEvent&amp; event);
        // ...
    };
    
    void Button::HandleMouse (MouseEvent&amp; event) {
        // ...
        Changed();
    }
</PRE>

<A NAME="auto1061"></A>
<P>The <CODE>FontDialogDirector</CODE> class mediates between widgets in the
dialog box.  <CODE>FontDialogDirector</CODE> is a subclass of
<CODE>DialogDirector</CODE>:</P>

<A NAME="auto1062"></A>
<PRE>
    class FontDialogDirector : public DialogDirector {
    public:
        FontDialogDirector();
        virtual ~FontDialogDirector();
        virtual void WidgetChanged(Widget*);
    
    protected:
        virtual void CreateWidgets();
    
    private:
        Button* _ok;
        Button* _cancel;
        ListBox* _fontList;
        EntryField* _fontName;
    };
</PRE>

<A NAME="auto1063"></A>
<P><CODE>FontDialogDirector</CODE> keeps track of the widgets it displays.  It
redefines
<CODE>CreateWidgets</CODE> to create the widgets and initialize its
references to them:</P>

<A NAME="auto1064"></A>
<PRE>
    void FontDialogDirector::CreateWidgets () {
        _ok = new Button(this);
        _cancel = new Button(this);
        _fontList = new ListBox(this);
        _fontName = new EntryField(this);
    
        // fill the listBox with the available font names
    
        // assemble the widgets in the dialog
    }
</PRE>

<A NAME="auto1065"></A>
<P><CODE>WidgetChanged</CODE> ensures that the widgets work together properly:</P>

<A NAME="auto1066"></A>
<PRE>
    void FontDialogDirector::WidgetChanged (
        Widget* theChangedWidget
    ) {
        if (theChangedWidget == _fontList) {
            _fontName->SetText(_fontList->GetSelection());
    
        } else if (theChangedWidget == _ok) {
            // apply font change and dismiss dialog
            // ...
    
        } else if (theChangedWidget == _cancel) {
            // dismiss dialog
        }
    }
</PRE>

<A NAME="auto1067"></A>
<P>The complexity of <CODE>WidgetChanged</CODE> increases proportionally
with the complexity of the dialog.  Large dialogs are undesirable for
other reasons, of course, but mediator complexity might mitigate the
pattern's benefits in other applications.</P>

<A NAME="knownuses"><A>
<H2><A HREF="#relatedpatterns"><IMG SRC="gifsb/down3.gif" BORDER=0 
ALT="next: Related Patterns"></A> Known Uses</H2> 

<A NAME="auto1068"></A>
<P>Both ET++ [<A HREF="bibfs.htm#et++" TARGET="_mainDisplayFrame">WGM88</A>] and the THINK C class library [<A HREF="bibfs.htm#think" TARGET="_mainDisplayFrame">Sym93b</A>] use
director-like objects in dialogs as mediators between widgets.</P>

<A NAME="smalltkv-use-media2"></A>
<A NAME="viewmanager"></A>
<P>The application architecture of Smalltalk/V for Windows is based on a
mediator structure [<A HREF="bibfs.htm#lalonde_st" TARGET="_mainDisplayFrame">LaL94</A>]. In that environment, an
application consists of a Window containing a set of panes.  The
library contains several predefined Pane objects; examples include
TextPane, ListBox, Button, and so on.
These panes can be used without subclassing.  An application developer
only subclasses from ViewManager, a class that's responsible for doing
inter-pane coordination. ViewManager is the Mediator, and each pane
only knows its view manager, which is considered the "owner" of the
pane.  Panes don't refer to each other directly.</P>

<A NAME="auto1069"></A>
<P>The following object diagram shows a snapshot of an application at
run-time:</P>

<A NAME="viewman-281o"></A>
<P ALIGN=CENTER><IMG SRC="Pictures/media032.gif"></P>

<A NAME="auto1070"></A>
<P>Smalltalk/V uses an event mechanism for Pane-ViewManager
communication.  A pane generates an event when it wants to get
information from the mediator or when it wants to inform the mediator
that something significant happened.  An event defines a symbol (e.g.,
<CODE>#select</CODE>) that identifies the event. To handle the event, the
view manager registers a method selector with the pane.  This selector
is the event's handler; it will be invoked whenever the event occurs.</P>

<A NAME="auto1071"></A>
<P>The following code excerpt shows how a ListPane object gets created inside
a ViewManager subclass and how ViewManager registers an event handler
for the <CODE>#select</CODE> event:</P>

<A NAME="auto1072"></A>
<PRE>
    self addSubpane: (ListPane new
         paneName: 'myListPane';
         owner: self;
         when: #select perform: #listSelect:).
</PRE>

<A NAME="auto1073"></A>
<P>Another application of the Mediator pattern is in coordinating complex
updates.  An example is the ChangeManager class mentioned in
<A HREF="pat5gfs.htm" TARGET="_mainDisplayFrame">Observer (293)</A>.  ChangeManager mediates between
subjects and observers to avoid redundant updates.  When an object
changes, it notifies the ChangeManager, which in turn coordinates the
update by notifying the object's dependents.</P>

<A NAME="unidraw-use-media"></A>
<P>A similar application appears in the Unidraw drawing
framework [<A HREF="bibfs.htm#unidraw_framework" TARGET="_mainDisplayFrame">VL90</A>] and uses a class called CSolver to
enforce connectivity constraints between "connectors." Objects in
graphical editors can appear to stick to one another in different
ways.  Connectors are useful in applications that maintain
connectivity automatically, like diagram editors and circuit design
systems.  CSolver is a mediator between connectors.  It solves the
connectivity constraints and updates the connectors' positions to
reflect them.</P>

<A NAME="relatedpatterns"></A>
<H2><A HREF="#last"><IMG SRC="gifsb/down3.gif" BORDER=0 ALT="next: 
navigation"></A> Related Patterns</H2> 

<A NAME="auto1074"></A>
<P><A HREF="pat4efs.htm" TARGET="_mainDisplayFrame">Facade (185)</A> differs
from Mediator in that it abstracts a subsystem of objects to provide
a more convenient interface.  Its protocol is unidirectional; that
is, Facade objects make requests of the subsystem classes but not
vice versa.  In contrast, Mediator enables cooperative behavior
that colleague objects don't or can't provide, and the protocol is
multidirectional.</P>

<A NAME="media-comm-coll2"></A>
<P>Colleagues can communicate with the mediator using the <A
HREF="pat5gfs.htm" TARGET="_mainDisplayFrame">Observer (293)</A> pattern.</P>

<A NAME="last"></A>
<P><A HREF="#intent"><IMG SRC="gifsb/up3.gif" BORDER=0></A><BR>
<A HREF="pat5ffs.htm" TARGET="_mainDisplayFrame"><IMG SRC="gifsb/rightar3.gif"
        ALIGN=TOP BORDER=0></A> <A HREF="pat5ffs.htm"
        TARGET="_mainDisplayFrame">Memento</A><BR>
<A HREF="pat5dfs.htm" TARGET="_mainDisplayFrame"><IMG SRC="gifsb/leftarr3.gif"
        ALIGN=TOP BORDER=0></A> <A HREF="pat5dfs.htm"
        TARGET="_mainDisplayFrame">Iterator</A>
</P>

</BODY>

</HTML>